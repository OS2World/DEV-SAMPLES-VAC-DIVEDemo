const ISize StarFieldRenderer::modelSpaceSize (5000,5000);
const int StarFieldRenderer::numDistances (20);

void StarFieldRenderer::userConstructor()
{
   buildAndSetPalette ();

   for (int i = 0; i < NUMSTARS; ++i)
      aStars [i] = new Star (modelSpaceSize, numDistances);
}


void StarFieldRenderer::userDestructor()
{
   for (int i = 0; i < NUMSTARS; ++i)
      delete aStars [i];
}

void StarFieldRenderer::buildAndSetPalette ()
{
   static int const numEntries = 21;
   static RGB2 argb2 [numEntries] = {0};

   argb2[0].bRed   = 0;                 // Space
   argb2[0].bGreen = 0;
   argb2[0].bBlue  = 0;

   for (int i = 1; i < numEntries; ++i)
   {
      BYTE const greyValue = 255 - 10 * (i - 1);
      argb2[i].bRed   = greyValue;
      argb2[i].bGreen = greyValue;
      argb2[i].bBlue  = greyValue;
   }

   setNumPaletteEntries (numEntries);
   setPalette (argb2);
}

void StarFieldRenderer::render()
{
   IFUNCTRACE_DEVELOP();
   FastCanvas & canvas = *fastCanvas();
   PCHAR const buffer = canvas.buffer();
   ISize const bufferSize = canvas.bufferSize();
   Boolean const isAnimationRunning = canvas.isAnimationRunning();
   memset (buffer, 0,
      bufferSize.width() * bufferSize.height());

   float const xScale = (float) bufferSize.width () / (float) modelSpaceSize.width ();
   float const yScale = (float) bufferSize.height() / (float) modelSpaceSize.height();

   for (int i = 0; i < NUMSTARS; ++i)
   {
      aStars[i]->draw(buffer, bufferSize, xScale, yScale);

      if (isAnimationRunning)
         aStars[i]->move(IPoint(20,0), modelSpaceSize);
   }
}





