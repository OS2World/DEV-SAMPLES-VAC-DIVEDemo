/*******************************************************************************
* FILE NAME: DiveDemo2.cpp                                                     *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     DiveDemo2                                                                *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IINFOA_
#include <iinfoa.hpp>
#endif

#ifndef _IFONT_
#include <ifont.hpp>
#endif

#ifndef _ICOLOR_
#include <icolor.hpp>
#endif

#ifndef _ITBAR_
#include <itbar.hpp>
#endif

#ifndef _ITBARBUT_
#include <itbarbut.hpp>
#endif

#ifndef _IRESLIB_
#include <ireslib.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ISLIDER_
#include <islider.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _FASTCANVAS_
#include "FastCanvas.hpp"
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IVBFLY_
#include <ivbfly.hpp>
#endif

#ifndef _STARFIELDRENDERER_
#include "StarFieldRenderer.hpp"
#endif

#ifndef _FADERRENDERER_
#include "FaderRenderer.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _DIVEDEMO2_
#include "DiveDemo2.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for DiveDemo2Conn22
//*****************************************************************************
class DiveDemo2Conn22 : public IObserver {
public:
   virtual  ~DiveDemo2Conn22(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IInfoArea * aSource, IVBFlyText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InfoArea1(this) to VBFlyText1(longTextControl))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setLongTextControl(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IInfoArea * source;
   IVBFlyText * target;
   Boolean aligning;


};   //DiveDemo2Conn22


//*****************************************************************************
// Class definition for DiveDemo2Conn10
//*****************************************************************************
class DiveDemo2Conn10 : public IObserver {
public:
   virtual  ~DiveDemo2Conn10(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(ISlider * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : RequestedRateSlider(armTickOffset) to RequestedAnimationRateStaticText(valueAsInt))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->moveArmToTick(target->VBINTVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : RequestedRateSlider(armTickOffset) to RequestedAnimationRateStaticText(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->armTickOffset());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == ISlider::armChangeId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   ISlider * source;
   IStaticText * target;
   Boolean aligning;


};   //DiveDemo2Conn10


//*****************************************************************************
// Class definition for DiveDemo2Conn31
//*****************************************************************************
class DiveDemo2Conn31 : public IObserver {
public:
   virtual  ~DiveDemo2Conn31(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IProgressIndicator * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ActualRateProgressIndicator(armTickOffset) to ActualRateStaticText(valueAsInt))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->moveArmToTick(target->VBINTVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ActualRateProgressIndicator(armTickOffset) to ActualRateStaticText(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->armTickOffset());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IProgressIndicator::armChangeId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IProgressIndicator * source;
   IStaticText * target;
   Boolean aligning;


};   //DiveDemo2Conn31


//*****************************************************************************
// Class definition for DiveDemo2Conn32
//*****************************************************************************
class DiveDemo2Conn32 : public IObserver, public IStandardNotifier {
public:
   virtual  ~DiveDemo2Conn32(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(DiveDemo2 * aSource, ISlider * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == DiveDemo2::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to RequestedRateSlider(customLogic, \"Set tick marks\"))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      int i;
                  
      target->setPrimaryScale(IProgressIndicator::scale1);
      target->setTicks(IProgressIndicator::scale1, 201);
      for (i = 0; i < 201; i += 20)
      {
         target->setTickLength(i, 5);
         target->setTickText(i, IString(i));
      }
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   DiveDemo2 * source;
   ISlider * target;


};   //DiveDemo2Conn32


//*****************************************************************************
// Class definition for DiveDemo2Conn20
//*****************************************************************************
class DiveDemo2Conn20 : public IObserver {
public:
   virtual  ~DiveDemo2Conn20(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(ISlider * aSource, FastCanvas * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : RequestedRateSlider(armTickOffset) to FastCanvas1(drawFrequencyRequestedFPS))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->moveArmToTick(target->drawFrequencyRequestedFPS());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : RequestedRateSlider(armTickOffset) to FastCanvas1(drawFrequencyRequestedFPS))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setDrawFrequencyRequestedFPS(source->armTickOffset());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == ISlider::armChangeId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == FastCanvas::drawFrequencyRequestedFPSId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   ISlider * source;
   FastCanvas * target;
   Boolean aligning;


};   //DiveDemo2Conn20


//*****************************************************************************
// Class definition for DiveDemo2Conn11
//*****************************************************************************
class DiveDemo2Conn11 : public IObserver {
public:
   virtual  ~DiveDemo2Conn11(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FastCanvas * aSource, IProgressIndicator * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FastCanvas1(drawFrequencyActualFPS) to ActualRateProgressIndicator(armTickOffset))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setDrawFrequencyActualFPS(target->armTickOffset());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FastCanvas1(drawFrequencyActualFPS) to ActualRateProgressIndicator(armTickOffset))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->moveArmToTick(source->drawFrequencyActualFPS());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FastCanvas::drawFrequencyActualFPSId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IProgressIndicator::armChangeId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FastCanvas * source;
   IProgressIndicator * target;
   Boolean aligning;


};   //DiveDemo2Conn11


//*****************************************************************************
// Class definition for DiveDemo2Conn8
//*****************************************************************************
class DiveDemo2Conn8 : public IObserver, public IStandardNotifier {
public:
   virtual  ~DiveDemo2Conn8(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, FastCanvas * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ToolBarButton1(buttonClickEvent) to FastCanvas1(priorityClass))");
         try {target->setPriorityClass(IApplication::idleTime);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   FastCanvas * target;


};   //DiveDemo2Conn8


//*****************************************************************************
// Class definition for DiveDemo2Conn9
//*****************************************************************************
class DiveDemo2Conn9 : public IObserver, public IStandardNotifier {
public:
   virtual  ~DiveDemo2Conn9(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, FastCanvas * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ToolBarButton2(buttonClickEvent) to FastCanvas1(priorityClass))");
         try {target->setPriorityClass(IApplication::regular);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   FastCanvas * target;


};   //DiveDemo2Conn9


//*****************************************************************************
// Class definition for DiveDemo2Conn30
//*****************************************************************************
class DiveDemo2Conn30 : public IObserver, public IStandardNotifier {
public:
   virtual  ~DiveDemo2Conn30(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, FastCanvas * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ToolBarButton3(buttonClickEvent) to FastCanvas1(priorityClass))");
         try {target->setPriorityClass(IApplication::timeCritical);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   FastCanvas * target;


};   //DiveDemo2Conn30


//*****************************************************************************
// Class definition for DiveDemo2Conn21
//*****************************************************************************
class DiveDemo2Conn21 : public IObserver {
public:
   virtual  ~DiveDemo2Conn21(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FastCanvas * aSource, StarFieldRenderer * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FastCanvas1(this) to StarFieldRenderer(fastCanvas))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFastCanvas(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == StarFieldRenderer::fastCanvasId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FastCanvas * source;
   StarFieldRenderer * target;
   Boolean aligning;


};   //DiveDemo2Conn21


//*****************************************************************************
// Class definition for DiveDemo2Conn41
//*****************************************************************************
class DiveDemo2Conn41 : public IObserver, public IStandardNotifier {
public:
   virtual  ~DiveDemo2Conn41(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, FastCanvas * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   DiveDemo2Conn41 & setADiveImageRenderer(FaderRenderer * aSelf) {iADiveImageRenderer = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ToolBarButton4(buttonClickEvent) to FastCanvas1(diveImageRenderer))");
         try {target->setDiveImageRenderer(iADiveImageRenderer);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   FastCanvas * target;
   FaderRenderer * iADiveImageRenderer;


};   //DiveDemo2Conn41


//*****************************************************************************
// Class definition for DiveDemo2Conn23
//*****************************************************************************
class DiveDemo2Conn23 : public IObserver, public IStandardNotifier {
public:
   virtual  ~DiveDemo2Conn23(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, FastCanvas * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   DiveDemo2Conn23 & setADiveImageRenderer(StarFieldRenderer * aSelf) {iADiveImageRenderer = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ToolBarButton5(buttonClickEvent) to FastCanvas1(diveImageRenderer))");
         try {target->setDiveImageRenderer(iADiveImageRenderer);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   FastCanvas * target;
   StarFieldRenderer * iADiveImageRenderer;


};   //DiveDemo2Conn23


//*****************************************************************************
// Class definition for DiveDemo2Conn25
//*****************************************************************************
class DiveDemo2Conn25 : public IObserver {
public:
   virtual  ~DiveDemo2Conn25(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FastCanvas * aSource, FaderRenderer * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FastCanvas1(this) to FaderRenderer(fastCanvas))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFastCanvas(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FaderRenderer::fastCanvasId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FastCanvas * source;
   FaderRenderer * target;
   Boolean aligning;


};   //DiveDemo2Conn25


//*****************************************************************************
// Class definition for DiveDemo2Conn27
//*****************************************************************************
class DiveDemo2Conn27 : public IObserver, public IStandardNotifier {
public:
   virtual  ~DiveDemo2Conn27(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, ISlider * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::closeId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(closeEvent) to RequestedRateSlider(armTickOffset))");
         try {target->moveArmToTick(0);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   ISlider * target;


};   //DiveDemo2Conn27


//*****************************************************************************
// Class definition for DiveDemo2Conn16
//*****************************************************************************
class DiveDemo2Conn16 : public IObserver, public IStandardNotifier {
public:
   virtual  ~DiveDemo2Conn16(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(DiveDemo2 * aSource, FastCanvas * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == DiveDemo2::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to FastCanvas1(priorityClass))");
         try {target->setPriorityClass(IApplication::regular);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   DiveDemo2 * source;
   FastCanvas * target;


};   //DiveDemo2Conn16


//*****************************************************************************
// Class definition for DiveDemo2Conn37
//*****************************************************************************
class DiveDemo2Conn37 : public IObserver, public IStandardNotifier {
public:
   virtual  ~DiveDemo2Conn37(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(DiveDemo2 * aSource, FastCanvas * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   DiveDemo2Conn37 & setADiveImageRenderer(StarFieldRenderer * aSelf) {iADiveImageRenderer = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == DiveDemo2::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to FastCanvas1(diveImageRenderer))");
         try {target->setDiveImageRenderer(iADiveImageRenderer);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   DiveDemo2 * source;
   FastCanvas * target;
   StarFieldRenderer * iADiveImageRenderer;


};   //DiveDemo2Conn37


//*****************************************************************************
// Class definition for DiveDemo2Conn19
//*****************************************************************************
class DiveDemo2Conn19 : public IObserver, public IStandardNotifier {
public:
   virtual  ~DiveDemo2Conn19(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FastCanvas * aSource, IToolBarButton * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == FastCanvas::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FastCanvas1(ready) to ToolBarButton4(customLogic, \"Disable fader if not enough colors\"))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      if (source->colorDepth() <= 8)
         target->disable();
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FastCanvas * source;
   IToolBarButton * target;


};   //DiveDemo2Conn19


#pragma export (DiveDemo2::readyId)
const INotificationId DiveDemo2::readyId = "DiveDemo2::readyId";

//------------------------------------------------------------------------------
// DiveDemo2 :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (DiveDemo2::defaultFramingSpec())
const IRectangle DiveDemo2::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 17 - 467),ISize(585, 467)));
}


//------------------------------------------------------------------------------
// DiveDemo2 :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (DiveDemo2::defaultTitle())
IString DiveDemo2::defaultTitle()
{
   return("Dave Briccetti's DIVE Demo Two");
}


//------------------------------------------------------------------------------
// DiveDemo2 :: DiveDemo2
//------------------------------------------------------------------------------
#pragma export (DiveDemo2::DiveDemo2(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
DiveDemo2::DiveDemo2(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iInfoArea1 = new IInfoArea(this, id+WNDOFFSET_DiveDemo2_InfoArea1);
   iToolBar1 = new IToolBar(
      id+WNDOFFSET_DiveDemo2_ToolBar1, 
      this, 
      IToolBar::aboveClient, 
      false, 
      IToolBar::defaultStyle() | IToolBar::buttonBitmapAndTextVisible);
   iToolBarButton1 = new IToolBarButton(
      id+WNDOFFSET_DiveDemo2_ToolBarButton1, 
      iToolBar1, 
      iToolBar1, 
      IRectangle(), 
      IToolBarButton::standardFormat | IToolBarButton::textVisible | ICustomButton::autoLatch | IControl::group | IWindow::visible);
   iToolBarButton2 = new IToolBarButton(
      id+WNDOFFSET_DiveDemo2_ToolBarButton2, 
      iToolBar1, 
      iToolBar1, 
      IRectangle(), 
      IToolBarButton::standardFormat | IToolBarButton::textVisible | ICustomButton::autoLatch | IWindow::visible);
   iToolBarButton3 = new IToolBarButton(
      id+WNDOFFSET_DiveDemo2_ToolBarButton3, 
      iToolBar1, 
      iToolBar1, 
      IRectangle(), 
      IToolBarButton::standardFormat | IToolBarButton::textVisible | ICustomButton::autoLatch | IWindow::visible);
   iToolBarButton4 = new IToolBarButton(
      id+WNDOFFSET_DiveDemo2_ToolBarButton4, 
      iToolBar1, 
      iToolBar1, 
      IRectangle(), 
      IToolBarButton::defaultStyle() | ICustomButton::autoLatch | IControl::group | IControl::tabStop);
   iToolBarButton5 = new IToolBarButton(
      id+WNDOFFSET_DiveDemo2_ToolBarButton5, 
      iToolBar1, 
      iToolBar1, 
      IRectangle(), 
      IToolBarButton::defaultStyle() & ~IControl::group | ICustomButton::autoLatch);
   iMultiCellCanvas1 = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iActualRateProgressIndicator = new IProgressIndicator(
      id+WNDOFFSET_DiveDemo2_ActualRateProgressIndicator, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      201);
   iRequestedRateSlider = new ISlider(
      id+WNDOFFSET_DiveDemo2_RequestedRateSlider, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      201);
   iFastCanvas1 = new FastCanvas(
      id+WNDOFFSET_DiveDemo2_FastCanvas1, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iRequestedAnimationRateStaticText = new IStaticText(
      id+WNDOFFSET_DiveDemo2_RequestedAnimationRateStaticText, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iActualRateStaticText = new IStaticText(
      id+WNDOFFSET_DiveDemo2_ActualRateStaticText, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iStaticText1 = new IStaticText(
      id+WNDOFFSET_DiveDemo2_StaticText1, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iStaticText2 = new IStaticText(
      id+WNDOFFSET_DiveDemo2_StaticText2, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iStaticText3 = new IStaticText(
      id+WNDOFFSET_DiveDemo2_StaticText3, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iVBFlyText1 = new IVBFlyText(this);
   iStarFieldRenderer = new StarFieldRenderer();
   iFaderRenderer = new FaderRenderer();

   conn22 = new DiveDemo2Conn22();
   conn10 = new DiveDemo2Conn10();
   conn31 = new DiveDemo2Conn31();
   conn32 = new DiveDemo2Conn32();
   conn20 = new DiveDemo2Conn20();
   conn11 = new DiveDemo2Conn11();
   conn8 = new DiveDemo2Conn8();
   conn9 = new DiveDemo2Conn9();
   conn30 = new DiveDemo2Conn30();
   conn21 = new DiveDemo2Conn21();
   conn41 = new DiveDemo2Conn41();
   conn23 = new DiveDemo2Conn23();
   conn25 = new DiveDemo2Conn25();
   conn27 = new DiveDemo2Conn27();
   conn16 = new DiveDemo2Conn16();
   conn37 = new DiveDemo2Conn37();
   conn19 = new DiveDemo2Conn19();

   iInfoArea1->setFont(IFont("Helv", 10).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iInfoArea1->setBackgroundColor(IColor(230, 230, 230));
   iToolBar1->addAsLast(iToolBarButton1, iToolBarButton1->isGroup());
   iToolBar1->addAsLast(iToolBarButton2, iToolBarButton2->isGroup());
   iToolBar1->addAsLast(iToolBarButton3, iToolBarButton3->isGroup());
   iToolBar1->addAsLast(iToolBarButton4, iToolBarButton4->isGroup());
   iToolBar1->addAsLast(iToolBarButton5, iToolBarButton5->isGroup());
   iToolBarButton1->setText("Idle");
   iToolBarButton1->latch(false);
   iToolBarButton2->setText("Regular");
   iToolBarButton2->latch(true);
   iToolBarButton3->setText("Critical");
   iToolBarButton4->setBitmap(IResourceId(1, IDynamicLinkLibrary("resource")));
   iToolBarButton4->setText("Fader");
   iToolBarButton4->latch(false);
   iToolBarButton5->setBitmap(IResourceId(2, IDynamicLinkLibrary("resource")));
   iToolBarButton5->setText("Stars");
   iToolBarButton5->latch(true);
   iMultiCellCanvas1->addToCell(iActualRateProgressIndicator, 2, 7, 1, 1);
   iMultiCellCanvas1->addToCell(iRequestedRateSlider, 2, 6, 1, 1);
   iMultiCellCanvas1->addToCell(iFastCanvas1, 2, 2, 3, 1);
   iMultiCellCanvas1->addToCell(iRequestedAnimationRateStaticText, 4, 6, 1, 1);
   iMultiCellCanvas1->addToCell(iActualRateStaticText, 4, 7, 1, 1);
   iMultiCellCanvas1->addToCell(iStaticText1, 2, 4, 3, 1);
   iMultiCellCanvas1->addToCell(iStaticText2, 3, 6, 1, 1);
   iMultiCellCanvas1->addToCell(iStaticText3, 3, 7, 1, 1);
   iMultiCellCanvas1->setColumnWidth(2, IMultiCellCanvas::defaultCell().width(), true);
   iMultiCellCanvas1->setColumnWidth(3, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas1->setColumnWidth(4, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas1->setColumnWidth(5, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas1->setRowHeight(2, IMultiCellCanvas::defaultCell().height(), true);
   iMultiCellCanvas1->setRowHeight(6, IMultiCellCanvas::defaultCell().height(), false);
   iMultiCellCanvas1->setRowHeight(7, IMultiCellCanvas::defaultCell().height(), false);
   iMultiCellCanvas1->setRowHeight(8, IMultiCellCanvas::defaultCell().height(), false);
   iActualRateProgressIndicator->setMinimumSize(ISize(50, 31));
   iActualRateProgressIndicator->setBackgroundColor(IColor(160, 160, 190));
   iActualRateProgressIndicator->setFont(IFont("Helv", 8).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iRequestedRateSlider->setFont(IFont("System VIO", 4, true).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iRequestedRateSlider->setBackgroundColor(IColor(160, 160, 190));
   iRequestedRateSlider->setMinimumSize(ISize(50, 62));
   iFastCanvas1->setPriorityClass(IApplication::regular);
   iFastCanvas1->setMinimumSize(ISize(50, 50));
   iRequestedAnimationRateStaticText->setFont(IFont("Helv", 8).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iRequestedAnimationRateStaticText->setBackgroundColor(IColor(160, 160, 190));
   iRequestedAnimationRateStaticText->setAlignment(IStaticText::centerLeft);
   iRequestedAnimationRateStaticText->setMinimumSize(ISize(51, 68));
   iActualRateStaticText->setFont(IFont("Helv", 8).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iActualRateStaticText->setBackgroundColor(IColor(160, 160, 190));
   iActualRateStaticText->setAlignment(IStaticText::centerLeft);
   iActualRateStaticText->setMinimumSize(ISize(38, 34));
   iStaticText1->setAlignment(IStaticText::centerCenter);
   iStaticText1->setFont(IFont("Helv", 10).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iStaticText1->setText("Animation Speed (Frames per Second)");
   iStaticText1->setMinimumSize(ISize(50, 25));
   iStaticText2->setBackgroundColor(IColor(160, 160, 190));
   iStaticText3->setBackgroundColor(IColor(160, 160, 190));
   this->setFocus();
   this->setClient(iMultiCellCanvas1);
   userConstructor();
}     //end constructor


//------------------------------------------------------------------------------
// DiveDemo2 :: ~DiveDemo2
//------------------------------------------------------------------------------
#pragma export (DiveDemo2::~DiveDemo2())
DiveDemo2::~DiveDemo2()
{
   userDestructor();
   conn22->stopHandlingNotificationsFor(*iInfoArea1);
   conn22->stopHandlingNotificationsFor(*iVBFlyText1);
   conn10->stopHandlingNotificationsFor(*iRequestedRateSlider);
   conn10->stopHandlingNotificationsFor(*iRequestedAnimationRateStaticText);
   conn31->stopHandlingNotificationsFor(*iActualRateProgressIndicator);
   conn31->stopHandlingNotificationsFor(*iActualRateStaticText);
   conn32->stopHandlingNotificationsFor(*this);
   conn20->stopHandlingNotificationsFor(*iRequestedRateSlider);
   conn20->stopHandlingNotificationsFor(*iFastCanvas1);
   conn11->stopHandlingNotificationsFor(*iFastCanvas1);
   conn11->stopHandlingNotificationsFor(*iActualRateProgressIndicator);
   conn8->stopHandlingNotificationsFor(*iToolBarButton1);
   conn9->stopHandlingNotificationsFor(*iToolBarButton2);
   conn30->stopHandlingNotificationsFor(*iToolBarButton3);
   conn21->stopHandlingNotificationsFor(*iFastCanvas1);
   conn21->stopHandlingNotificationsFor(*iStarFieldRenderer);
   conn41->stopHandlingNotificationsFor(*iToolBarButton4);
   conn23->stopHandlingNotificationsFor(*iToolBarButton5);
   conn25->stopHandlingNotificationsFor(*iFastCanvas1);
   conn25->stopHandlingNotificationsFor(*iFaderRenderer);
   conn27->stopHandlingNotificationsFor(*this);
   conn16->stopHandlingNotificationsFor(*this);
   conn37->stopHandlingNotificationsFor(*this);
   conn19->stopHandlingNotificationsFor(*iFastCanvas1);

   delete conn22;
   delete conn10;
   delete conn31;
   delete conn32;
   delete conn20;
   delete conn11;
   delete conn8;
   delete conn9;
   delete conn30;
   delete conn21;
   delete conn41;
   delete conn23;
   delete conn25;
   delete conn27;
   delete conn16;
   delete conn37;
   delete conn19;


   delete iInfoArea1;
   delete iToolBar1;
   delete iToolBarButton1;
   delete iToolBarButton2;
   delete iToolBarButton3;
   delete iToolBarButton4;
   delete iToolBarButton5;
   delete iMultiCellCanvas1;
   delete iActualRateProgressIndicator;
   delete iRequestedRateSlider;
   delete iFastCanvas1;
   delete iRequestedAnimationRateStaticText;
   delete iActualRateStaticText;
   delete iStaticText1;
   delete iStaticText2;
   delete iStaticText3;
   delete iVBFlyText1;
   delete iStarFieldRenderer;
   delete iFaderRenderer;
}

//------------------------------------------------------------------------------
// DiveDemo2 :: initializePart
//------------------------------------------------------------------------------
#pragma export (DiveDemo2::initializePart())
DiveDemo2 & DiveDemo2::initializePart()
{
   iFastCanvas1->initializePart();
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// DiveDemo2 :: makeConnections
//------------------------------------------------------------------------------
#pragma export (DiveDemo2::makeConnections())
Boolean DiveDemo2::makeConnections()
{
   this->enableNotification();
   iInfoArea1->enableNotification();
   iToolBar1->enableNotification();
   iToolBarButton1->enableNotification();
   iToolBarButton2->enableNotification();
   iToolBarButton3->enableNotification();
   iToolBarButton4->enableNotification();
   iToolBarButton5->enableNotification();
   iMultiCellCanvas1->enableNotification();
   iActualRateProgressIndicator->enableNotification();
   iRequestedRateSlider->enableNotification();
   iFastCanvas1->enableNotification();
   iRequestedAnimationRateStaticText->enableNotification();
   iActualRateStaticText->enableNotification();
   iStaticText1->enableNotification();
   iStaticText2->enableNotification();
   iStaticText3->enableNotification();
   iVBFlyText1->enableNotification();
   iStarFieldRenderer->enableNotification();
   iFaderRenderer->enableNotification();

   unsigned long id = this->id();
   conn22->initialize(iInfoArea1, iVBFlyText1);
   conn22->handleNotificationsFor(*iInfoArea1);
   conn22->handleNotificationsFor(*iVBFlyText1);
   conn10->initialize(iRequestedRateSlider, iRequestedAnimationRateStaticText);
   conn10->handleNotificationsFor(*iRequestedRateSlider);
   conn10->handleNotificationsFor(*iRequestedAnimationRateStaticText);
   conn31->initialize(iActualRateProgressIndicator, iActualRateStaticText);
   conn31->handleNotificationsFor(*iActualRateProgressIndicator);
   conn31->handleNotificationsFor(*iActualRateStaticText);
   conn32->initialize(this, iRequestedRateSlider);
   conn32->handleNotificationsFor(*this);
   conn20->initialize(iRequestedRateSlider, iFastCanvas1);
   conn20->handleNotificationsFor(*iRequestedRateSlider);
   conn20->handleNotificationsFor(*iFastCanvas1);
   conn11->initialize(iFastCanvas1, iActualRateProgressIndicator);
   conn11->handleNotificationsFor(*iFastCanvas1);
   conn11->handleNotificationsFor(*iActualRateProgressIndicator);
   conn8->initialize(iToolBarButton1, iFastCanvas1);
   conn8->handleNotificationsFor(*iToolBarButton1);
   conn9->initialize(iToolBarButton2, iFastCanvas1);
   conn9->handleNotificationsFor(*iToolBarButton2);
   conn30->initialize(iToolBarButton3, iFastCanvas1);
   conn30->handleNotificationsFor(*iToolBarButton3);
   conn21->initialize(iFastCanvas1, iStarFieldRenderer);
   conn21->handleNotificationsFor(*iFastCanvas1);
   conn21->handleNotificationsFor(*iStarFieldRenderer);
   conn41->initialize(iToolBarButton4, iFastCanvas1);
   conn41->handleNotificationsFor(*iToolBarButton4);
   conn23->initialize(iToolBarButton5, iFastCanvas1);
   conn23->handleNotificationsFor(*iToolBarButton5);
   conn23->setADiveImageRenderer(iStarFieldRenderer);
   conn25->initialize(iFastCanvas1, iFaderRenderer);
   conn25->handleNotificationsFor(*iFastCanvas1);
   conn25->handleNotificationsFor(*iFaderRenderer);
   conn41->setADiveImageRenderer(iFaderRenderer);
   conn27->initialize(this, iRequestedRateSlider);
   conn27->handleNotificationsFor(*this);
   conn16->initialize(this, iFastCanvas1);
   conn16->handleNotificationsFor(*this);
   conn37->initialize(this, iFastCanvas1);
   conn37->handleNotificationsFor(*this);
   conn37->setADiveImageRenderer(iStarFieldRenderer);
   conn19->initialize(iFastCanvas1, iToolBarButton4);
   conn19->handleNotificationsFor(*iFastCanvas1);

   conn22->setTarget();
   conn10->setTarget();
   conn31->setTarget();
   conn20->setTarget();
   conn11->setTarget();
   conn21->setTarget();
   conn25->setTarget();
   return true;
}



#include "DiveDemo2.cpv"
