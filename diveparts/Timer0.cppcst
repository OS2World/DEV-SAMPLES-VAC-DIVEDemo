void Timer0::userConstructor ()
{
   APIRET rc;
   ULONG ulAction;
   ULONG ulOpenFlag = OPEN_ACTION_OPEN_IF_EXISTS;
   ULONG ulOpenMode = OPEN_FLAGS_FAIL_ON_ERROR | OPEN_SHARE_DENYNONE |
                      OPEN_ACCESS_READWRITE;

   ULONG ulResolution = 1;
   ULONG ulResolutionQuery = 0;
   ULONG ulVersionQuery = 0;

   ULONG * _Seg16 pulTimer16;                   // defines a 16:16 pointer
   ULONG ulSize2=sizeof(pulTimer16);

   rc = DosOpen ("TIMER0$  ", &hfTimer, &ulAction, 0, 0,
      ulOpenFlag, ulOpenMode, NULL);

   if (rc != NO_ERROR)
   {
      IString msg ("DosOpen TIMER0$: " + IString(rc));
      IAccessError err (msg);
      ITHROW (err);
   }

   ITRACE_DEVELOP("TIMER0$ opened");

   ULONG ulSize1 = sizeof ulResolution;

   rc = DosDevIOCtl (hfTimer, HRT_IOCTL_CATEGORY, HRT_SET_RESOLUTION,
      &ulResolution, ulSize1, &ulSize1, NULL, 0, NULL);

   if (rc != NO_ERROR)
   {
      IString msg ("DosDevIOCtl HRT_SET_RESOLUTION: " + IString(rc));
      IAccessError err (msg);
      ITHROW (err);
   }

   rc = DosDevIOCtl (hfTimer, HRT_IOCTL_CATEGORY, HRT_GET_POINTER,
      NULL, 0, NULL, (void *) &pulTimer16, ulSize2, &ulSize2);

   if (rc != NO_ERROR)
   {
      IString msg ("DosDevIOCtl HRT_GET_POINTER: " + IString(rc));
      IAccessError err (msg);
      ITHROW (err);
   }

   pulTimer = pulTimer16;    // converts a 16:16 pointer to a 0:32 pointer

   if (! pulTimer)
   {
      IString msg ("Null pointer");
      IAccessError err (msg);
      ITHROW (err);
   }
}

void Timer0::userDestructor ()
{
   ULONG rc = DosClose (hfTimer);

   if (rc != NO_ERROR)
   {
      IString msg ("DosClose: " + IString(rc));
      IAccessError err (msg);
      ITHROW (err);
   }

   ITRACE_DEVELOP("TIMER0$ closed");
}


void Timer0::delayUntil(ULONG aTimerValue)
{
   ULONG const timeNow = time();

   if (timeNow < aTimerValue)
   {
      ULONG const timeUntilNextDraw = aTimerValue - timeNow;
      ITRACE_DEVELOP ("Delaying for: " +
         IString (timeUntilNextDraw) + " ms");
      delayFor (timeUntilNextDraw);
   }
   else
      if (timeNow > aTimerValue)
      {
         ULONG const timeLateBy = timeNow - aTimerValue;
         ITRACE_DEVELOP ("Late by: " + IString (timeLateBy) + " ms");
      }
}


void Timer0::delayFor(ULONG milliseconds)
{
   ULONG ulDelay = milliseconds;
   ULONG ulSize = sizeof ulDelay;

   ULONG rc = DosDevIOCtl(hfTimer, HRT_IOCTL_CATEGORY, HRT_BLOCKUNTIL,
      &ulDelay, ulSize, &ulSize, NULL, 0, NULL);

     if (rc != NO_ERROR)
     {
         IString msg ("DosDevIOCtl HRT_BLOCKUNTIL: " + IString(rc));
         IAccessError err (msg);
         ITHROW (err);
     }
}

